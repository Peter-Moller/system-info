#!/bin/bash

# Copyright 2016 Peter MÃ¶ller, Pierre Moreau
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


######################################################################################
###########################    N E T W O R K   I N F O    ############################
######################################################################################
Section="Network"

# (Colors can be found at http://en.wikipedia.org/wiki/ANSI_escape_code, http://graphcomp.com/info/specs/ansi_col.html and other sites)
Reset="\e[0m"
ESC="\e["
RES="0"
BoldFace="1"
UnderlineFace="4"
Bold="${ESC}${BoldFace}m"


NetworkTempFile="/tmp/.${ScriptName}_Network.$$.txt"

printf "\n${ESC}${WhiteBack};${BlackFont};${BoldFace}mNetwork info                                                               ${Reset}\n"

if [ -z "${OS/Linux/}" ]; then
  # This doesn't work reliable
  #EnabledInterfaces="$(ip link 2>/dev/null | egrep "state UP|state UNKNOWN" | grep -v "lo:" | cut -d: -f2 | sed -e 's/^ *//')"
  #Interfaces="$(ip link 2>/dev/null | grep "^[0-9]" | grep -v "lo:" | cut -d: -f2 | sed -e 's/^ *//')"  --  don't use this since it won't work on Mageia
  exists netstat || print_warning "Command \"netstat\" not present. No listing of network interfaces possible"
  Interfaces="$(netstat -ie 2>/dev/null | egrep -v "^lo" | egrep "^[^\ ]*: " | cut -d: -f1)"
  # Ex: Interfaces='eth0 eth1 docker0'

  FormatstringNetwork="%-12s%-20s%-20s%-6s%-12s%-15s%-6s"
  printf "$ESC${UnderlineFace}m$FormatstringNetwork$Reset\n" "Interf." "IPv4" "MAC-address" "State" "Speed" "Port" "Duplex"

  exists ip || print_warning "Command \"ip\" not present. IPv4 address, MAC address and interface state will not be presented (you may need to execute script as root to use it)"
  exists ethtool || print_warning "Command \"ethtool\" not present. Media speed, port and duplex setting will not be presented (you may need to execute script as root to use it)"

  [[ -z "$Interfaces" ]] && echo "No network interfaces found (maybe you need to run as \"root\"?)"
  for i in $Interfaces
  do
    IPv4="$(ip address show $i 2>/dev/null | egrep -o "^\ *inet [^\ ]*\ " | awk '{print$2}')"
    # Ex: IPv4='130.235.16.180/23'
    MACaddress="$(ip address show $i 2>/dev/null | grep ether | awk '{print $2}')"
    # Ex: MACaddress='00:1e:67:7b:2e:d0'
    State="$(ip address show $i 2>/dev/null | grep -o "state [A-Z]* " | awk '{print $2}')"
    # Ex: State='UP'
    MediaSpeed="$(ethtool $i 2>/dev/null | grep -i speed | awk '{print $2}')"
    # Ex: MediaSpeed='1000Mb/s'
    Port="$(ethtool $i 2>/dev/null | grep "Port:" | cut -d\  -f2-)"
    # EX: Port='Twisted Pair'
    Duplex="$(ethtool $i 2>/dev/null | grep "Duplex:" | cut -d\  -f2-)"
    # Ex: Duplex='Full'
    printf "$FormatstringNetwork\n" "$i" "$IPv4" "$MACaddress" "$State" "$MediaSpeed" "$Port" "$Duplex"
  done
  [[ $Info -eq 1 ]] && printf "${InfoColor}(Use \"netstat -i\" to see the interfaces; \"ip address\" for IP address and state; \"ip address show\" for MAC-address; \"ethtool\" for media speed, port and duplex info)${Reset}\n\n"

  # Gather information about LISTEN processes (if lsof exists)
  if [ $(command -v lsof) ]; then
    lsof +c 0 -i 4 -n -P 2>/dev/null | grep LISTEN | sort -f -k 1,1 | cut -d\( -f1 | awk '{ print "4 - "$1" "$3" "$9 }' | sed 's/:/\ /g' | uniq > /tmp/NetworkTemp
    lsof +c 0 -i 6 -n -P 2>/dev/null | egrep LISTEN | awk '{ print "- 6 "$1" "$3" "$9 }' | sort -f | sed 's/\ \[.*\]/\ \*/g' | sed 's/:/\ /g' | uniq >> /tmp/NetworkTemp
  else
    print_warning "\"lsof\" not found; no listing of ports possible (you may need to execute script as root to use it)"
    lsof_warning="t"
  fi

elif [ -z "${OS/Darwin/}" ]; then
  # FormatstringNetwork is intended for the network listing
  FormatstringNetwork="%-8s%-28s%-20s%-20s%-10s%-30s"
  printf "$ESC${UnderlineFace}m$FormatstringNetwork$Reset\n" "Interf." "Interface name" "Ipv4-addr." "MAC-address" "Status" "Media speed"
  
  # This is a very short version of the 'network_info'-script
  networksetup -listnetworkserviceorder 2>/dev/null | egrep "^\([0-9\*]*\)\ " | sed -e 's/^(//g' -e 's/) /_/' > $NetworkTempFile
  exec 4<"$NetworkTempFile"
  while IFS=_ read -u 4 IFNum IFName
  do
    #Interface="$(networksetup -listallhardwareports 2>/dev/null | grep -A1 "Hardware Port: $IFName" | tail -1 | awk '{print $2}' | sed -e 's/^ *//')"
    Interface="$(networksetup -listnetworkserviceorder| grep -A1 " ${IFName}$" | tail -1 | awk '{print $NF}' | sed 's/)//')"
    # Ex: en0
    # It may be empty if it's a VLAN port; if so, look in another way
    [[ -z "$Interface" ]] && Interface="$(networksetup -listallhardwareports 2>/dev/null | grep -A2 "VLAN User Defined Name: $IFName" | tail -1 | awk '{print $NF}')"
    # Ex: Interface='vlan2'
    MediaSpeed="$(networksetup -getMedia "$Interface" 2>/dev/null | grep "^Active" | cut -d: -f2- | sed -e 's/^ *//')"
    # Ex: "1000baseT" or "autoselect"
    IPaddress="$(networksetup -getinfo "$IFName" 2>/dev/null | grep "^IP address" | cut -d: -f2 | sed -e 's/^ *//')"
    # Ex: " 130.235.16.211"
    SubnetMask="$(networksetup -getinfo "$IFName" 2>/dev/null | grep "^Subnet mask" | cut -d: -f2)"
    # Ex: " 255.255.254.0"
    SubnetNr="$(echo "$SubnetMask" | awk -F . '{print "obase=2;"$1*2**(3*8)+$2*2**(2*8)+$3*2**(1*8)+$4*2**(0*8)}' | bc | grep -o 1 | wc -l | awk '{print $1}')"
    # Ex: SubnetNr='23'
    [[ -n "$IPaddress" ]] && IPv4="${IPaddress}/${SubnetNr}" || IPv4=""
    MACaddress="$(ifconfig "$Interface" 2>/dev/null | grep "ether\ " | awk '{print $2}')"
    # Ex: " 00:3e:e1:be:06:59"
    Status="$(ifconfig  "$Interface" 2>/dev/null | grep "status:\ " | awk '{print $2}')"
    # Ex: "active"
    [[ -n "$Interface" ]] && printf "$FormatstringNetwork\n" "$Interface" "$IFName" "$IPv4" "$MACaddress" "$Status" "$MediaSpeed"
  done
  [[ $Info -eq 1 ]] && printf "${InfoColor}(Use \"ifconfig\" and \"networksetup\" to see network details)${Reset}\n"

  # Gather information about LISTEN processes:
  lsof +c 0 -i 4 -n -P 2>/dev/null | grep LISTEN | sort -f -k 1,1 | cut -d\( -f1 | awk '{ print "4 - "$1" "$3" "$9 }' | sed 's/:/\ /g' | uniq > /tmp/NetworkTemp
  lsof +c 0 -i 6 -n -P 2>/dev/null | egrep LISTEN | awk '{ print "- 6 "$1" "$3" "$9 }' | sort -f | sed 's/\ \[.*\]/\ \*/g' | sed 's/:/\ /g' | uniq >> /tmp/NetworkTemp
fi

# Print LISTEN information
FormatstringListen="%-6s%-6s%-25s%-15s%6s%2s%-17s%-15s"
# Only proceed if we have a file and no warning
if [ "$lsof_warning" = "" ]; then
  # First, sort by application:
  less /tmp/NetworkTemp | sort -f -k 3 > "$NetworkTempFile"
  rm /tmp/NetworkTemp
  echo ""
  # Print warning if we are not root
  if [ -n "${USER/root/}" -a -n "${UID/0/}" ]; then
    print_warning "You are not running as \"root\": you will only be able to see ports belongning to program *you* run!"
  fi
  # Add a line at the end so that we do not forget the last line during printout
  if [ -s "$NetworkTempFile" ]; then
    echo "" >> "$NetworkTempFile"
    LastIPv4=""
    LastIPv6=""
    LastProgram=""
    LastUser=""
    LastRange=""
    LastPort=""
    printf "Listening ports:\n"
    printf "${ESC}${UnderlineFace}m$FormatstringListen$Reset\n" "IPv4" "IPv6" "Program" "User" "Port#" " " "PortName" "Servicerange"
    exec 5<"$NetworkTempFile"
    while read -u 5 IPv4 IPv6 PROGRAM USERR RANGE PORT
    do
      # Reset the colors:
      PROGR="$(echo $PROGRAM | sed 's/x20/\ /g')"
      [[ -n "$(echo $PROGR | grep -o "com.agilebits.onepas")" ]] && PROGR="1Password"
      # If the lines are the same: do nothing more than to set both 4 and 6 when it is to be printed the next turn around
      if [[ "$LastProgram" = "$PROGR" && "$LastUser" = "$USERR" && "$LastPort" = "$PORT" && "$LastRange" = "$RANGE" ]]; then
        export LastIPv4="4"
        export LastIPv6="6"
      else
        # This turn is will be printed
        # If LastProgram is NOT empty (then assume the other are as well; first turn around - do not print!)
        # the choose colors
        if [ ! -z "$LastProgram" ]; then
          # Print!!
          #printf "${ESC}${BGColor};${FontColor}m$FormatstringListen$Reset\n" "$LastIPv4" "$LastIPv6" "$LastProgram" "$LastUser" "`grep "^$LastPort\b" /etc/services | head -1 | awk '{ print $2 }' | cut -d/ -f1`" " " "`echo $LastPort | sed 's/_/\ /g'`" "$LastRange"
          #printf "$FormatstringListen\n" "$LastIPv4" "$LastIPv6" "$LastProgram" "$LastUser" "`grep "^$LastPort\b" /etc/services | head -1 | awk '{ print $2 }' | cut -d/ -f1`" " " "`echo $LastPort | sed 's/_/\ /g'`" "$LastRange"
          printf "$FormatstringListen\n" "$LastIPv4" "$LastIPv6" "$LastProgram" "$LastUser" "$(echo $LastPort | sed 's/_/\ /g')" " " "$(grep "\b$LastPort\b" /etc/services | head -1 | awk '{ print $1 }')" "$LastRange"
        fi
        LastIPv4="$IPv4"
        LastIPv6="$IPv6"
      fi
      LastProgram="$PROGR"
      LastUser="$USERR"
      LastPort="$PORT"
      LastRange="$RANGE"
    done
  else
    printf "\nNo ports open for listening\n"
  fi
  [[ $Info -eq 1 ]] &&  printf "${InfoColor}(Use \"lsof +c 0 -i 4 -n | egrep LISTEN\" to see active listening ports (IPv4; change 4 for 6 for IPv6))${Reset}\n"
fi

rm $NetworkTempFile 2>/dev/null
