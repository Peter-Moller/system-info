# Copyright 2016 Peter MÃ¶ller, Pierre Moreau
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


######################################################################################
##########################    B A S I C   O S - I N F O     ##########################
######################################################################################
Section="Basic info"

# OS version (either 'Darwin' or 'Linux')
# See a comprehensive list of uname results: 
# https://en.wikipedia.org/wiki/Uname
OS="$(uname -s 2>/dev/null)"
# OS Size ('32' / '64')
OS_size="$(uname -m 2>/dev/null | sed -e "s/i.86/32/" -e "s/x86_64/64/" -e "s/armv7l/32/")"
# OS Architecture ('x86_64')
OS_arch="$(uname -m 2>/dev/null | sed -e "s/i386/i686/")"


# Check for functions used
if [ -z "${OS/Linux/}" ]; then
  exists dmidecode || print_warning "Command 'dmidecode' not found: some memory-related information will be unavailable!"
  exists zcat || print_warning "Command 'zcat' not found: some security-related information will be unavailable!"
fi
echo ""

# Get things that differ

# Linux
if [ -z "${OS/Linux/}" ]; then
  ComputerName="$(uname -n)"
  # ComputerName=vm67.cs.lth.se

  # Find out which Distro
  # Fist: look at the /etc/*-release files
  Distro="$(less $(ls -1 /etc/mageia-release /etc/centos-release /etc/redhat-release /etc/gentoo-release /etc/fedora-release 2>/dev/null | head -1) 2>/dev/null)"
  # Distro='CentOS Linux release 7.2.1511 (Core) '
  # If no such file, look for /etc/os-release
  if [ -z "$Distro" ]; then
    [[ -f /etc/os-release ]] && Distro="$(less /etc/os-release | grep PRETTY_NAME | cut -d\" -f2)"
    # Distro='CentOS Linux 7 (Core)'
  fi
  # If no such file, look for /etc/lsb-release
  if [ -z "$Distro" ]; then
    [[ -f /etc/lsb-release ]] && Distro="$(less /etc/os-release | grep DISTRIB_DESCRIPTION | cut -d\" -f2)"
  fi
  # If no such file, look for /proc/version
  if [ -z "$Distro" ]; then
    [[ -f /proc/version ]] && Distro="$(less /proc/version | cut -d\( -f1)"
    # Distro='Linux version 3.10.0-327.36.3.el7.x86_64 '
  fi
  # OK, so it an unknown system
  if [ -z "$Distro" ]; then
    Distro="Unknown Linux-distro"
  fi
  [[ $Info -eq 1 ]] &&  DistroVerInfo="(Look in various \"/etc/*-release\", \"/etc/os-release\", \"/proc/version\" or \"/etc/lsb-version\" for OS info)" || DistroVerInfo=""

  # Get kernel version
  KernelVer="$(uname -r | cut -d\. -f1,2 2>/dev/null)"
  # KernelVer='3.10'
  Kernel_version_label="Kernel version"

  # Get the Serial Number
  SerialNumber="$(dmidecode -t system 2>/dev/null | grep Serial | cut -d: -f2 | sed 's/ //')"
  [[ -z "$SerialNumber" ]] && SerialNumber="No serial number found (or 'dmidecode' missing)"
  if [ $Info -eq 1 ]; then SNInfo="dmidecode -t system | grep Serial"; else SNInfo=""; fi
  # SerialNumber='F5KM20KXF694'

  # Are we running in a VM environment?
  # This one is a bit tricky since there are many ways to cover this.
  # Read this for more info: http://unix.stackexchange.com/questions/89714/easy-way-to-determine-virtualization-technology
  VMenv="$(dmesg 2>/dev/null | grep -i " Hypervisor detected: " 2>/dev/null | cut -d: -f2 | sed 's/^ *//')"
  # Ex: VMenv='VMware'
  [[ $Info -eq 1 ]] &&  VMenvInfo="(Look in \"dmesg\" for \"Hypervisor detected:\" to detect a virtual machine)" || VMenvInfo=""

  if [ -z "${USER/root/}" -o -z "${UID/0/}" ]; then
    # Get a better VMenv if found
    if [ -n "$VMenv" ]; then
      VMenv="$(dmidecode -s system-product-name 2>/dev/null)"
    fi
    # Ex: VMenv='VMware Virtual Platform'
    # It may still be a VM environment
    if [ -z "$VMenv" ]; then
      VMenv="$(virt-what 2>/dev/null)"
      # Ex: VMenv='vmware'
    fi
  fi
  if [ -z "$VMenv" ]; then
    VMenv="$(if [ -n "$(grep "^flags.*\ hypervisor\ " /proc/cpuinfo)" ]; then echo "VM environment detected"; fi)"
    # Ex: VMenv='VM environment detected'
  fi

  # Detect if the computer is connected to a LDAP-server
  if [ -n "$(grep "^passwd" /etc/nsswitch.conf | grep ldap)" ]; then
    LDAPserver="$(grep "^uri " /etc/ldap.conf | cut -d\/ -f3)"
    # Ex: LDAPserver='ldap.ddg.lth.se'
    LDAPbase="$(grep "^base " /etc/ldap.conf | awk '{print $NF}')"
    # Ex: LDAPbase='dc=student,dc=lth,dc=se'
    DirectoryService="LDAP-server: \"$LDAPserver\"; base: \"$LDAPbase\""
  fi


elif [ -z "${OS/Darwin/}" ]; then
  DistroVer="$(sw_vers -productVersion 2>/dev/null)"
  [[ $Info -eq 1 ]] &&  DistroVerInfo="(Run \"sw_vers -productVersion\" for OS info)" || DistroVerInfo=""

  # Get a full name for the version:
  case "$DistroVer" in
    "10.4"*) Distro="Mac OS X \"Tiger\"" ;;
    "10.5"*) Distro="Mac OS X \"Leopard\"" ;;
    "10.6"*) Distro="Mac OS X \"Snow Leopard\"" ;;
    "10.7"*) Distro="Mac OS X \"Lion\"" ;;
    "10.8"*) Distro="OS X \"Mountain Lion\"" ;;
    "10.9"*) Distro="OS X \"Mavericks\"" ;;
    "10.10"*) Distro="OS X \"Yosemite\"" ;;
    "10.11"*) Distro="OS X \"El Capitan\"" ;;
    "10.12"*) Distro="macOS \"Sierra\"" ;;
    "10.13"*) Distro="macOS \"High Sierra\"" ;;
    "10.14"*) Distro="macOS \"Mojave\"" ;;
    *) Distro="macOS" ;;
  esac
  KernelVer="$(sw_vers -buildVersion)"
  # Ex: KernelVer='16D32'
  Kernel_version_label="Build"
  ComputerName="$(networksetup -getcomputername 2>/dev/null)"
  # Get basic Mac info for later usage:
  system_profiler SPHardwareDataType 2>/dev/null > "$OSTempFile"
  # This produces a file like this:
  # Hardware:
  #
  #    Hardware Overview:
  #
  #      Model Name: Mac Pro
  #      Model Identifier: MacPro5,1
  #      Processor Name: 6-Core Intel Xeon
  #      Processor Speed: 2.93 GHz
  #      Number of Processors: 2
  #      Total Number of Cores: 12
  #      L2 Cache (per Core): 256 KB
  #      L3 Cache (per Processor): 12 MB
  #      Memory: 24 GB
  #      Processor Interconnect Speed: 6.4 GT/s
  #      Boot ROM Version: MP51.007F.B03
  #      SMC Version (system): 1.39f11
  #      SMC Version (processor tray): 1.39f11
  #      Serial Number (system): CK0XXXXXXXX
  #      Serial Number (processor tray): J5031XXXXXXXX     
  #      Hardware UUID: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
  # 
  # Using 'Model Identifier', one can identify a Mac at the sites at the end of the script
  
  # What Mac model is it?
  ModelIdentifier="$(egrep "^\s*Model Identifier:" $OSTempFile | cut -d: -f2 | sed 's/^ //')"
  # ModelIdentifier='iMac14,2' or 'VMware7,1'
  # Get the long name for it
  ModelIdentifierName="$(grep "#.*:${ModelIdentifier}$" "${DirName}/${ScriptName}" | cut -d: -f1 | sed -e 's/#/ - "/' -e 's/$/"/')"
  # ModelIdentifierName='- iMac (27-inch, Late 2013)'
  # If the first three letters of $ModelIdentifier doesn't include 'Mac' och 'iMa', we are probably running inside a VM

  # Get the Serial Number
  SerialNumber="$(ioreg -l 2>/dev/null | grep IOPlatformSerialNumber | cut -d\" -f4)"
  [[ -z "$SerialNumber" ]] && SerialNumber="No serial number found"
  if [ $Info -eq 1 ]; then SNInfo="ioreg -l | grep IOPlatformSerialNumber"; else SNInfo=""; fi
  # SerialNumber='F5KM20KXF694'
  
  if [ ! "$(echo $ModelIdentifier | cut -c1-3)" = "Mac" -a ! "$(echo $ModelIdentifier | cut -c1-3)" = "iMa" -a ! "$(echo $ModelIdentifier | cut -c1-3)" = "Xse" ]; then
    VMenv="$ModelIdentifier"
    ModelIdentifier="Virtual Mac"
    ModelIdentifierName=" "
  fi
  [[ $Info -eq 1 ]] &&  VMenvInfo="(If \"Model Identifier\" from \"system_profiler SPHardwareDataType\" doesn't start with \"Mac\" or \"iMac\", then it's a virtual machine)" || VMenvInfo=""

  # Are we bound to AD?
  # See: https://www.jamf.com/jamf-nation/discussions/7039/how-to-check-if-a-computer-is-actually-bound-to-the-ad for details
  ADDomain="$(dsconfigad -show 2>/dev/null | grep "Active Directory Domain" | cut -d= -f2 | sed 's/^ *//')"
  # Ex: ADDomain='uw.lu.se'
  [[ -n "$ADDomain" ]] && DirectoryService="Bound to \"$ADDomain\" (Active Directory)" || DirectoryService=""
  
  # Find out about Profiles (MCX -- Apples managed profiles)
  # Running as root gives you more info, but you will get *something* when run as ordinary user
  if [ -z "${USER/root/}" -o -z "${UID/0/}" ]; then
    # See: http://krypted.com/mac-security/manage-profiles-from-the-command-line-in-os-x-10-9/ for some details
    Profiles="$(/usr/bin/profiles -L 2>/dev/null | grep "^There are")"
    # Ex: Profiles="There are no configuration profiles installed for user 'cs-pmo'"
    # In fact, I have no machines with Profiles on to try...
  fi

  # Find out if it's a server
  # First step: does the name from sw_vers include "server"?
  # Find out if it's a server and if it's configured or not
  SW_VERS="$(sw_vers | grep ProductName | cut -d: -f2 | tr -d "\t") $(sw_vers | grep ProductVersion | awk '{print $2}')"
  if [ -z "$(echo "$SW_VERS" | grep -i server)" ]; then
    # If not, it may still be a server. Beginning with OS X 10.8 all versions include the command serverinfo:
    serverinfo --software 1>/dev/null 2>/dev/null
    # Exit code 0 = server; 1 = NOT server
    ServSoft=$?
    if [ $ServSoft -eq 0 ]; then
      # Is it configured?
      serverinfo --configured 1>/dev/null
      ServConfigured=$?
      if [ $ServConfigured -eq 0 ]; then
        OSX_server="$(serverinfo --productname 2>/dev/null) $(serverinfo --shortversion)"
      else
        OSX_server="$(serverinfo --productname 2>/dev/null) $(serverinfo --shortversion) - unconfigured"
      fi
    fi
  fi
fi


### PRINT THE RESULT
printf "${ESC}${BlackBack};${WhiteFont}mSystem info for:${Reset} ${ESC}${WhiteBack};${BlackFont}m$ComputerName${Reset}   ${ESC}${BlackBack};${WhiteFont}mDate & time:${Reset} ${ESC}${WhiteBack};${BlackFont}m$(date +%F", "%R)${Reset}   ${ESC}${BlackBack};${WhiteFont}mUser:${Reset} ${ESC}${WhiteBack};${BlackFont}m$USER${Reset}\n"

printf "\n${ESC}${WhiteBack};${BlackFont};${BoldFace}mOperating System                                                           ${Reset}\n"


printf "$Formatstring\n" "Operating System:" "$Distro $DistroVer $([[ -n "$OSX_server" ]] && echo "($OSX_server)")" "$DistroVerInfo"
printf "$Formatstring\n" "${Kernel_version_label}:" "$KernelVer" ""
[[ $Info -eq 1 ]] &&  Information="(Use \"uname -m\" to get architecture details)" || Information=""
printf "$Formatstring\n" "Architecture:" "${OS_arch} (${OS_size}-bit)" "$Information"
if [ -z "${OS/Darwin/}" ]; then
  [[ -n "$(system_profiler SPFibreChannelDataType)" ]] && printf "$Formatstring\n" "Fibre Channel:" "Present. Look into this yourself with \"system_profiler SPFibreChannelDataType\""
fi
printf "$Formatstring\n" "Shell:" "$(echo "$(${SHELL} --version 2>/dev/null | head -1 | grep -o "^[^\(]*")")" ""
printf "$Formatstring\n" "Virtual env.:" "${VMenv:-No VM environment detected}" "$VMenvInfo"
if [ $Info -eq 1 -a -z "${OS/Darwin/}" ]; then Information="(Use \"system_profiler SPHardwareDataType\" to see hardware details)"; else Information=""; fi
if [ -n "$ModelIdentifier" ]; then
  printf "$Formatstring\n" "Model Identifier:" "$ModelIdentifier ${ModelIdentifierName:-Unknown Mac-model}" "${Information}"
fi
printf "$Formatstring\n" "Serial Number:" "$SerialNumber" "$SNInfo"
if [ $Info -eq 1 -a -z "${OS/Darwin/}" ]; then
  Information="(Use \"dsconfigad -show\" to see AD-connection details)"
elif [ $Info -eq 1 -a -z "${OS/Linux/}" ]; then
  Information="(Look in  \"/etc/ldap.conf\" for LDAP-connection details)"
else
  Information=""
fi
printf "$Formatstring\n" "Directory Service:" "${DirectoryService:-Not bound}" "${Information}"
if [ -z "${OS/Darwin/}" ]; then
  # Find out if we are running JAMF (a.k.a. Casper)
  if [ -n "$(ps -ef | grep "[j]amf\/bin\/jamf")" ]; then
    [[ $Info -eq 1 ]] && Information="(Use \"jamf -version\" to see JamF version)" || Information=""
    EnterpriseMgmt="JAMF running, $(jamf -version)"
    [[ -z "$Profiles" ]] && Profiles="This computer is managed by JAMF, but you are not running as \"root\" and thus we cannot determine the profiles"
  fi
  printf "$Formatstring\n" "Enterprise Mgmt:" "${EnterpriseMgmt:--None detected-}" "${Information}"
  [[ $Info -eq 1 ]] && Information="(Use \"profiles -P\" to see details about installed Profiles)" || Information=""
  printf "$Formatstring\n" "Managed profiles:" "${Profiles:--None detected-}" "${Information}"
fi

########################################
## Docker info (currently only on Linux)
if [ -z "${OS/Linux/}" ]; then
  # Start by checking if we have docker installed on the system
  DockerInstalled="$(which -a docker 2>/dev/null)"    # Ex: DockerInstalled='/usr/bin/docker'
  DockerVersion="$(docker --version 2>/dev/null | sed -e 's/^Docker //' -e 's/, build [a-f0-9]*//')"    # Ex: Dockerversion='version 19.03.8'
  if [ -n "$DockerInstalled" ]; then
    DockerRunning="$(pgrep dockerd)"    # Ex: DockerRunning='32009'
    # If you are root, you'll get more info
    if [ -z "${USER/root/}" -o -z "${UID/0/}" ]; then
      DockerList="$(docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}")"
      # Ex. DockerList='gitlab              Up 4 days (healthy)   0.0.0.0:22->22/tcp, 0.0.0.0:80->80/tcp, 0.0.0.0:443->443/tcp, 0.0.0.0:5050->5050/tcp'
    else
      # OK, so we're not root. Get number of running dockers:
      NrRunningDocker="$(pgrep containerd-shim | wc -l)"    # Ex: NrRunningDocker='2'
      DockerPorts="$(ps -ef | grep [d]ocker-proxy | egrep -o "\-host\-port [0-9]* " | awk '{print $NF}' | sort -n)"    # Ex: DockerPorts='80\n443\n3306'
    fi
  fi
  # Print info about docker (regardless of weather it's installed or not)
  printf "\n${ESC}${WhiteBack};${BlackFont};${BoldFace}mDocker                                                                     ${Reset}\n"
  [[ -n "$DockerVersion" ]] && echo "Docker $DockerVersion is installed on this system$([[ -n "$DockerRunning" ]] && echo " and is active:" || echo " but is not active")" || echo "Docker is not installed on this system"
  # If Docker is running on the system, provide som details
  if [ -n "$DockerRunning" ]; then
    # If we are root, provide more specific details:
    if [ -z "${USER/root/}" -o -z "${UID/0/}" ]; then
      echo "$DockerList"
    else
      echo "$NrRunningDocker Docker$([[ $NrRunningDocker -e 1 ]] && echo " is" || echo "s are") running, but since we are not running as user \"root\", we cannot see the details."
      echo "Ports in use by $([[ $NrRunningDocker -e 1 ]] && echo " this Docker" || echo "these Dockers"): $(echo $DockerPorts | sed 's/ /, /g')"
    fi
  else
    echo "Docker is not running on the system"
  fi
fi
