# Copyright 2016 Peter MÃ¶ller, Pierre Moreau
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


######################################################################################
#############################     D I S K   I N F O     ##############################
######################################################################################
Section="Disk"

DiskTempFile="/tmp/.${ScriptName}_Disk.$$.txt"

printf "\n${ESC}${WhiteBack};${BlackFont};${BoldFace}mDisk info                                                                  ${Reset}\n"

if [ -z "${OS/Linux/}" ]; then
  # 'smartctl' is heavily used. Warn if not there:
  exists smartctl || print_warning "Command 'smartctl' not present: some disk-related information will be unavailable! (You may need to execute script as root to use it)"
  exists hdparm || print_warning "Command 'hdparm' not present: information about TRIM-support will be unavailable! (You may need to execute script as root to use it)"
  
  echo "Visible disks:"
  # Set up the Linux format strings
  # FormatstringDisk is intended for the disk listing
  FormatstringDisk="%-8s%-10s%-26s%-10s%-13s%-9s%-20s%-22s"
  # 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
  #          1         1         1         1         1         1         1         1         1
  # Device  Size      Medium Type               Part.table  SMART        TRIM     Bus                 Model                 
  # sda     111,8G    Solid State Device        dos         Verified     Yes      SATA/SATA Express   INTEL SSDSA2CW12
  # sdb     1,8T      Rotating disk (7200 rpm)  dos         Enabled      Unknown                      WDC WD2003FYYS-0      
  # sdc     2,7T      Rotating disk ( rpm)      gpt         Not enabled  Unknown  ata                 My Book 1140          
  
  # Goal:
  # Present first the disks and then the different file systems
  # Disks are presented as:
  # Device Name     Size     Medium Type     S.M.A.R.T.     TRIM     Bus     Modell
  # File systems are presented as:
  # Partition     Mount Point     Available (GB & %)     Filsystem-type
  
  printf "${ESC}${UnderlineFace}m$FormatstringDisk${Reset}\n" "Device" "Size" "Medium Type" "Part.tbl" "SMART" "TRIM" "Bus" "Model"
  # Get a list of the disks:
  lsblk -o kname,size,rota,ro,type,model | egrep " disk " | egrep -v "^fd|^sr" > $DiskTempFile
  # Ex:
  #  'KNAME   SIZE ROTA RO TYPE MODEL'
  #  'sda   111,8G    0  0 disk INTEL SSDSA2CW12'
  #  'sdb     1,8T    1  0 disk WDC WD2003FYYS-0'
  
  # Loop through the file and print the result
  exec 4<$DiskTempFile
  while read -u 4 KNAME SIZE ROTA RO TYPE MODEL0 MODEL1 MODEL2 MODEL3
  do
    # Get a better size (if smartctl present)
    exists smartctl && Size="$(smartctl -a /dev/$KNAME | egrep "^User Capacity:" | cut -d\[ -f2 | sed 's/\]//')"
    # Ex: SIZE='240 GB'
    [[ -n "$Size" ]] && SIZE="$Size"
    
    # Partition table
    PartTable="$(udevadm info --query=all --name=$KNAME | grep ID_PART_TABLE_TYPE | cut -d= -f2 | tr "[:lower:]" "[:upper:]")"
    # Ex: PartTable='GPT'
    # Exchange DOS and MSDOS for MBR
    if [ "$PartTable" = "DOS" -o "$PartTable" = "MSDOS" ]; then PartTable="MBR"; fi
    
    # Get Medium Type
    RotationRate=""
    if [ $ROTA -eq 1 ]; then
      RotationRate="$(udevadm info --query=all --name=$KNAME | egrep "ROTATION_RATE" | cut -d= -f2)"
      Medium_Type="Rotating disk (${RotationRate:-??} rpm)"
    elif [ "$MODEL0 $MODEL1" = "Virtual disk" ]; then
      Medium_Type="Virtual disk"
    else
      Medium_Type="Solid State Device"
    fi
    # Get a better description (if smartctl present)
    exists smartctl && Medium_T="$(smartctl -a /dev/$KNAME | egrep "^Rotation Rate:" | cut -d: -f2 | sed 's/^\ *//')"
    [[ -n "$Medium_T" ]] && Medium_Type="$Medium_T"
    
    # Get SMART
    [[ $(udevadm info --query=all --name=$KNAME | egrep "SMART_ENABLED" | cut -d= -f2) -eq 1 ]] && SMART="Enabled" || SMART="Not enabled"
    
    # Get TRIM
    exists hdparm && Trim="$(hdparm -I /dev/$KNAME 2>/dev/null | grep "TRIM")"
    [[ -n "$Trim" ]] && TRIM="Enabled" || TRIM="Unknown"
    # ...but if it's a rotating drive, TRIM isn't a thing
    [[ $ROTA -eq 1 ]] && TRIM="N/A"
    
    # Get Bus
    # if we are root AND smartctl exists; use it
    Bus=""
    Bus_Simple="$(udevadm info --query=all --name=$KNAME | egrep "ID_BUS" | cut -d= -f2 | tr "[:lower:]" "[:upper:]")"
    if [ "$USER" = "root" -o -z "$USER" ]; then
      if [ -n "${Bus_Simple/USB/}" ]; then
        exists smartctl && Bus="$(smartctl -a /dev/$KNAME | grep "^SATA Version is:" | cut -d: -f2 | cut -d\( -f1 | sed 's/^\ *//')"
      fi
    fi
    [[ -z "$Bus" ]] && Bus="$Bus_Simple"
    
    # Print it
    printf "$FormatstringDisk\n" "$KNAME" "$SIZE" "$Medium_Type" "$PartTable" "$SMART" "${TRIM:----}" "$Bus" "$MODEL0 $MODEL1 $MODEL2 $MODEL3"
  done
  if [ $Info -eq 1 ]; then
    printf "${InfoColor}(use \"lsblk -o kname,size,rota,ro,type,model\" to list the disks and general disk info)${Reset}\n"
    printf "${InfoColor}(use \"smartctl\" to get information about size, disk kind and bus)${Reset}\n"
    printf "${InfoColor}(use \"udevadm\" for rotation rate & bus)${Reset}\n"
    printf "${InfoColor}(use \"hdparm\" for SMART info)${Reset}\n"
  fi

  echo
  
  echo "Mounted file systems:"
  
  # File system listing
  FormatstringFS="%-24s%-10s%-12s%-20s%-35s"
  # 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
  #          1         1         1         1         1         1         1         1         1         1         1         1
  # Partition   Filesys   Available    Label                 Mount Point
  # /dev/sda5   ext4      23M (7%)     Linux                 /boot
  
  df -khT | grep "^\/dev\/" | sort > $DiskTempFile
  # Ex: (header not included)
  # 'Filesystem     Type      Size  Used Avail Use% Mounted on'
  # '/dev/sda6      ext4       74G   53G   18G  75% /'
  # '/dev/sda5      ext4      315M  272M   23M  93% /boot'
  
  printf "${ESC}${UnderlineFace}m$FormatstringFS${Reset}\n" "Partition" "Filesys" "Available" "Label" "Mount Point"
  
  exec 5<$DiskTempFile
  while read -u 5 Partition Type Size Used Avail Use Mounted
  do
    #AvailPercent="$(df -kh $Partition | grep $Partition | awk '{print $5}')"
    # Ex: AvailPercent='93%'
    FreePercent="$(echo "100 - $(df -kh $Partition | grep $Partition | awk '{print $5}' | sed 's/\%$//')" | bc)"
    Label="$(lsblk -o LABEL -d $Partition -n)"
    printf "$FormatstringFS\n" "$Partition" "$Type" "${Avail} (${FreePercent}%)" "$Label" "$Mounted"
  done
  if [ $Info -eq 1 ]; then
    printf "${InfoColor}(use \"df\" to get a lot of information about the mounted file systems)${Reset}"
  fi

  [[ $Info -eq 1 ]] &&  printf="${InfoColor}(Use \"df -khT \" for details on the partitions. \"lsblk -o LABEL\" is used for disk labels${Reset}\n)"
  
  
  # Report NFS-mounted file systems as well
  if [ -n "$(df -khT | egrep "\snfs[3-5]?\s" | sort)" ]; then
    df -khT | egrep "\snfs[3-5]?\s" | sort > $DiskTempFile
    # Ex: (header not included)
    # 'Filesystem               Type      Size  Used Avail Use% Mounted on
    # 'tiger.student.lth.se:/dk nfs4      734G  292G  435G  41% /h/dk'
    # 
    FormatstringNFS="%-16s%-9s%-12s%-40s"
    # /h/dk        nfs4     tiger.student.lth.se:/dk      435G (59%)  
    # Mount Point  NFS-ver  Server                        Available   
    echo
    printf "${ESC}${UnderlineFace}m$FormatstringNFS${Reset}\n" "Mount Point" "NFS-ver" "Available" "Server"
    exec 6<$DiskTempFile
    while read -u 6 Filesys Type Size Used Avail Use MountPoint
    do
      FreePercent="$(echo "100 - $(df -kh $Mounted | grep $Filesys | awk '{print $5}' | sed 's/\%$//')" | bc)"
      printf "$FormatstringNFS\n" "$MountPoint" "$Type" "${Avail} (${FreePercent}%)" "$Filesys"
    done
  else
    echo
    echo "No NFS mounts detected."
  fi
  [[ $Info -eq 1 ]] &&  printf="${InfoColor}(Use \"df -khT \" for info on NFS)${Reset}\n"
  
elif [ -z "${OS/Darwin/}" ]; then
  # Set up the Darwin format strings
  # FormatstringDisk is intended for the disk listing
  FormatstringDisk="%-18s%-10s%-13s%-15s%-6s%-20s"
  # 123456789012345678901234567890123456789012345678901234567890
  #          1         1         1         1         1         1
  # BSD Name         Size      Medium Type   SMART     TRIM  Bus                 
  # disk0            500.3 GB  Solid State   Verified  Yes   SATA/SATA Express   
  # FormatstringFS is intended for the file system listing
  FormatstringFS="%-14s%-30s%-14s%-35s"

  system_profiler -detailLevel mini SPUSBDataType SPSerialATADataType SPSASDataType SPNVMeDataType 2>/dev/null | egrep ":$|BSD Name:|Medium Type:|Physical Interconnect:|S.M.A.R.T. status:|TRIM Support:" > $DiskTempFile
  # This will produce a list of disks, like this:
  # USB:
  #  USB 3.0 Bus:
  #      USB3.0 Hub             :
  #          My Book 1144:
  #            Media:
  #              My Book 1144:
  #                BSD Name: disk1
  #      BRCM20702 Hub:
  #          Bluetooth USB Host Controller:
  #      FaceTime HD Camera (Built-in):
  #      Apple USB SuperDrive:
  #      USB2.0 Hub             :
  #          USB Mouse:
  #          Keyboard Hub:
  #              Apple Keyboard:
  #      EPSON Epson Stylus SX440 Series:
  # SATA/SATA Express:
  #     Apple SSD Controller:
  #       Physical Interconnect: PCI
  #         APPLE SSD SM0512F:
  #           BSD Name: disk0
  #           Medium Type: Solid State
  #           TRIM Support: Yes
  #           S.M.A.R.T. status: Verified
  #     Intel 8 Series Chipset:
  # ----
  # SAS:
  #     SAS Domain 0:
  #         SCSI Target Device @ 0:
  #             SCSI Logical Unit @ 0:
  #               BSD Name: disk3
  #               S.M.A.R.T. status: Not Supported
  #         SCSI Target Device @ 127:
  #             SCSI Logical Unit @ 0:
  # ----
  # SATA/SATA Express:
  #     Intel 6 Series Chipset:
  #       Physical Interconnect: SATA
  #         WDC WD5000BTKT-40MD3T0:
  #           BSD Name: disk0
  #           Medium Type: Rotational
  #           S.M.A.R.T. status: Verified
  #     Intel 6 Series Chipset:
  #       Physical Interconnect: SATA
  #         WDC WD5000BTKT-40MD3T0:
  #           BSD Name: disk1
  #           Medium Type: Rotational
  #           S.M.A.R.T. status: Verified
  
  # Print head of disk list
  printf "${ESC}${UnderlineFace}m${FormatstringDisk}${Reset}\n" "BSD Name"  "Size" "Medium Type" "S.M.A.R.T." "TRIM" "Bus"
  # Iterate through the list of disks:
  for i in $(diskutil list physical 2>/dev/null | egrep "^\/dev" | sed 's;/dev/;;' | egrep -v "virtual|disk image" | awk '{print $1}')
  # Ex: i='disk0'
  do
    # First: it may be a Core Storage volume (FileVault2 or the like)
    if [ -z "$(grep $i $DiskTempFile)" ]; then
      # Look for 'Logical Volume'
      if [ -n "$(diskutil cs list | grep -B2 $i | grep "Logical Volume")" ]; then
        Bus=""
        SMART=""
        MediumType="Core Storage"
        TRIM=""
        Size="$(diskutil list | grep -v "/dev/$i" | grep "${i}$" | cut -c58-67)"
      fi
    else
      Bus="$(egrep "^[A-Z].*:$| $i" $DiskTempFile | grep -B1 $i | head -1 | cut -d: -f1)"
      # Ex: Bus='SATA/SATA Express'
      SMART="$(egrep -B3 -A3 "$i" $DiskTempFile | grep "S.M.A.R.T. status:" | cut -d: -f2 | sed 's/^ //')"
      # Ex: SMART='Verified'
      TRIM="$(egrep -B3 -A3 "$i" $DiskTempFile | grep "TRIM Support:" | cut -d: -f2 | sed 's/^ //')"
      # Ex: TRIM='Yes'
      MediumType="$(egrep -B3 -A3 "$i" $DiskTempFile | grep "Medium Type:" | cut -d: -f2 | sed 's/^ //')"
      # Ex: MediumType='Solid State'
      Size="$(diskutil list | grep -v "/dev/$i" | grep "${i}$" | awk '{print $3" "$4}' | sed 's/*//')"
      # Ex: Size='500.3 GB'
    fi
    printf "$FormatstringDisk\n" "$i" "$Size" "${MediumType:---}" "${SMART:---}" "${TRIM:---}" "$Bus"
  done
  [[ $Info -eq 1 ]] && printf "${InfoColor}(Use \"diskutil list\" and \"diskutil cs list\" to list the disks and \"system_profiler -detailLevel mini SPUSBDataType SPSerialATADataType SPSASDataType SPNVMeDataType\" for info on the disks)${Reset}\n"

  echo

  # Secondly, get a list of File Systems on the partitions
  printf "${ESC}${UnderlineFace}m${FormatstringFS}${Reset}\n" "Partition" "Mount Point" "Available" "File System"
  #for i in $(diskutil list 2>/dev/null | egrep "^\/dev" | sed 's;/dev/;;' | egrep -v "virtual|disk image" | awk '{print $1}')
  # Ex: i='disk0'
  PartList="$(df 2>/dev/null | egrep "^\/dev\/disk" | awk '{print $1}' | sort)"
  # Ex: PartList='/dev/disk1 /dev/disk2s3 /dev/disk3s3 /dev/disk3s2 /dev/disk2s2'
  for i in $PartList
  # Ex: i='/dev/disk1'
  do
    MountPoint="$(df 2>/dev/null | grep "^$i" | cut -d% -f3 | sed 's/^ *//')"
    # Ex: MountPoint='/Volumes/Local TimeMachine'
    FS="$(diskutil info "$MountPoint" | grep "Name (User Visible):" | cut -d: -f2 | sed 's/^ *//')"
    # Ex: FS='Mac OS Extended (Case-sensitive, Journaled)'
    Avail="$(df -kh "$MountPoint" | grep $i | awk '{print $4}')"
    # Ex: Avail='48%'
    Filled="$(echo "100 - $(df -kh "$MountPoint" | grep $i | awk '{print $5}' | sed 's/\%$//')" | bc)"
    # Ex: Filled='52'
    printf "${FormatstringFS}\n" "$i" "$MountPoint" "${Avail} (${Filled}%)" "$FS"
  done
  [[ $Info -eq 1 ]] &&  printf "${InfoColor}(Use \"diskutil\" and \"system_profiler -detailLevel mini SPUSBDataType SPSerialATADataType SPSASDataType SPNVMeDataType\" to see details about your disks)${Reset}\n"
fi

echo

rm $DiskTempFile 2>/dev/null
